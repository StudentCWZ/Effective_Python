# -*- coding: utf-8 -*-
# @Author: StudentCWZ
# @Date:   2022-04-11 13:36:02
# @Last Modified by:   StudentCWZ
# @Last Modified time: 2022-04-11 13:36:02


# 第八条：不要使用含有两个以上表达式的列表推导


"""
    1. 除基本的用法之外，列表推导也支持多重循环。
    2. 例如，要把矩阵简化成一维列表，使原来的每个单元格都成为新列表中的普通元素。这个功能采用两个 for 表达式的推导即可实现，这些 for 表达式会按照从左至右的顺序来评估。
    3. 还有一种包含多重循环的合理用法，那就是根据输入列表来创建有两层深度的新列表。
    4. 如果表达式里还有一层循环，那么列表推导就会变得很长，这时必须把它分成多行来写，才能看得更清楚一些。
    5. 列表推导也支持多个 if 条件。处在同一循环级别中的多项条件，彼此之间默认形成 and 表达式。
    6. 每一级循环的 for 表达式后面都可以指定条件。但是这样的代码非常难懂。
    7. 在列表推导中，最好不要使用两个以上的表达式。可以使用两个条件、两个循环或一个条件搭配一个循环。如果要写的代码比这还复杂，那么就应该使用普通的 if 和 for 语句，并编写辅助函数。
    8. 总结：
       - 列表推导支持多级循环，每一级循环也支持多项条件。
       - 超过两个表达式的列表推导是很难理解的，应该尽量避免。
"""

# Example one
matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
flat = [x for row in matrix for x in row]
print(flat)
print('------------------------------------')

# Example two
squared = [[x ** 2 for x in row] for row in matrix]
print(squared)
print('------------------------------------')

# Example three
a = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
b = [x for x in a if x > 4 if x % 2 == 0]   # 两种推导方式等效
c = [x for x in a if x > 4 and x % 2 == 0]
print(b == c)
print('------------------------------------')

# Example four
matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
filtered = [[x for x in row if x % 3 == 0] for row in matrix if sum(row) >= 10]
print(filtered)
print('------------------------------------')